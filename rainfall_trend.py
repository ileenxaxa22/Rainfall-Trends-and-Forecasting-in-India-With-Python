# -*- coding: utf-8 -*-
"""rainfall_trend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tE1p85bmEihRlLmKsaPuyfFGZ-J3g1Ku

# **Rainfall Trends and Forecasting in India**
"""

import pandas as pd

#importing datasets
rainfall_data = pd.read_csv('/content/rainfall_area-wt_India_1901-2015.csv')
print(rainfall_data.head())

"""### Analyzing Annual Rainfall Trends Over Time"""

#import plotly libraries
import plotly.express as px
import plotly.graph_objects as go

from re import template
#analyze trends in annual rainfall over time
annual_rainfall = rainfall_data[['YEAR','ANNUAL']]
fig_annual = go.Figure()
fig_annual.add_trace(go.Scatter(
    x=annual_rainfall['YEAR'],
    y=annual_rainfall['ANNUAL'],
    mode='lines',
    name='Annual Rainfall',
    line= dict(color='blue', width=2),
    opacity=0.8
    ))
fig_annual.add_trace(go.Scatter(
    x=annual_rainfall['YEAR'],
    y=[annual_rainfall['ANNUAL'].mean()]*len(annual_rainfall),
    mode='lines',
    name='Mean Rainfall',
    line= dict(color='red', width=2, dash='dash'),
    ))

fig_annual.update_layout(
    title='Trends in Annual Rainfall in India (1901-2015)',
    xaxis_title='Year',
    yaxis_title='Rainfall (mm)',
    font=dict(size=12),
    template ='plotly_white',
    legend=dict(title="Legend"),
    height = 500,
    width = 800
    )
fig_annual.show()

#identify months with the highest and the lowest rainfall on average
monthly_columns = ['JAN',   'FEB',   'MAR',   'APR',   'MAY',    'JUN',    'JUL',    'AUG',    'SEP',   'OCT',   'NOV',  'DEC']
monthly_avg = rainfall_data[monthly_columns].mean()

highest_rainfall_month = monthly_avg.idxmax()
lowest_rainfall_month = monthly_avg.idxmin()
print(f"The month with the highest average rainfall is {highest_rainfall_month} with an average of {monthly_avg[highest_rainfall_month]:.2f} mm.")
print(f"The month with the lowest average rainfall is {lowest_rainfall_month} with an average of {monthly_avg[lowest_rainfall_month]:.2f} mm.")

#plotting the bar graph
fig_monthly = px.bar(
    x=monthly_avg.index,
    y=monthly_avg.values,
    labels={'x':'Month', 'y':'Average Rainfall (mm)'},
    title='Average Monthly Rainfall in India (1901-2015)',
    text = monthly_avg.values
)
fig_monthly.add_hline(
    y=monthly_avg.mean(),
    line_dash="dash",
    line_color="red",
    annotation_text="Mean Rainfall",
    annotation_position="top right"
    )
fig_monthly.update_traces(marker_color='blue', marker_line_color='rgb(8,48,107)',
                          marker_line_width=1.5, opacity=0.6)
fig_monthly.update_layout(
    template ='plotly_white',
    height = 500,
    width = 800)
fig_monthly.show()

total_avg = monthly_avg.mean()
print(total_avg)

#seasonal rainfall distributation
seasonal_columns = ['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']
seasonal_avg = rainfall_data[seasonal_columns].mean()
print(seasonal_avg)

#plotting the bar
fig_seasonal = px.bar(
    x=seasonal_avg.index,
    y=seasonal_avg.values,
    labels={'x':'Season', 'y':'Average Rainfall (mm)'},
    title='Seasonal Rainfall Distributtion in India (1901-2015)',
    text = seasonal_avg.values,
    color = seasonal_avg.values,
    color_continuous_scale = ['#6439FF','#AD49E1','#921A40','#E65C19']
)
fig_seasonal.update_traces(marker_line_color='black',
                          marker_line_width=1.5, opacity=0.6)
fig_seasonal.update_layout(
    template ='plotly_white',
    height = 500,
    width = 800,
    coloraxis_colorbar=dict(title='mm')
)
fig_seasonal.show()

"""### Assessing the Impact of Climate Change in the Rainfall Trends in India"""

#calculating rolling averages to assess climate change impact

rainfall_data['10 year Rolling Avg'] = rainfall_data['ANNUAL'].rolling(window=10).mean()
print(rainfall_data[['YEAR', '10 year Rolling Avg']].head(20))

#plotting the graphs
#plot the annual avg
fig_climate_change = go.Figure()
fig_climate_change.add_trace(go.Scatter(
    x=rainfall_data['YEAR'],
    y=rainfall_data['ANNUAL'],
    mode='lines',
    name='Annual Rainfall',
    line= dict(color='blue', width=2),
    opacity=0.8
    ))
#plot the rolling avg
fig_climate_change.add_trace(go.Scatter(
    x=rainfall_data['YEAR'],
    y=rainfall_data['10 year Rolling Avg'],
    mode='lines',
    line= dict(color='red', width=2),
    name='10 Year Rolling Average'
    ))
fig_climate_change.update_layout(
    title='Impact of Climate Change on Rainfall in India (1901-2015)',
    xaxis_title='Year',
    yaxis_title='Rainfall (mm)',
    font=dict(size=12),
    template ='plotly_white',
    legend=dict(title="Legend"),
    height = 500,
    width = 800
    )
fig_climate_change.show()

"""using statistical thresholds (1.5 standard deviations below or above the mean), letâ€™s identify years with extreme or deficient rainfall.

"""

#finding the drought and extreme rainfall using statical test
from scipy.stats import pearsonr

#identifying drought and extreme rainfall years
mean_rainfall = rainfall_data['ANNUAL'].mean()
std_rainfall = rainfall_data['ANNUAL'].std()

#getting the years in the list which have drought and extreme rainfall
dought_years = rainfall_data[rainfall_data['ANNUAL']< (mean_rainfall - 1.5*std_rainfall)]
extreme_years = rainfall_data[rainfall_data['ANNUAL'] > (mean_rainfall + 1.5*std_rainfall)]
# print("Years with drought:", dought_years['YEAR'].tolist())
# print("Years with extreme rainfall:", extreme_years['YEAR'].tolist())

#correlation seasonal rainfall with annual rainfall totals
seasonal_columns = ['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']
annual_rainfall = rainfall_data['ANNUAL']
# seasonal_rainfall = rainfall_data[seasonal_columns]
# correlation_matrix = seasonal_rainfall.corrwith(annual_rainfall)
# print(correlation_matrix)
seasonal_correlation = {
    season: pearsonr(rainfall_data[season], annual_rainfall)[0]
    for season in seasonal_columns
}

#displaying
dought_years_summary = dought_years[['YEAR', 'ANNUAL']].reset_index(drop=True)
extreme_years_summary = extreme_years[['YEAR', 'ANNUAL']].reset_index(drop=True)
print("Years with drought:")
print(dought_years_summary)
print("Years with extreme rainfall:")
print(extreme_years_summary)

seasonal_correlation_summary = pd.Series(seasonal_correlation).reset_index()
seasonal_correlation_summary.columns = ['Season', 'Correlation']
print("Correlation between Seasonal Rainfall and Annual Rainfall:")
print(seasonal_correlation_summary)

"""## Detecting Anomalies in the Rainfall Trends in India"""

#using Isolation forest algorithms to identify anomalies
from sklearn.ensemble import IsolationForest

#detect anomlous rainfall years based on annual data
isolation_forest = IsolationForest(contamination=0.05, random_state=42)
rainfall_data['Annual_Anomaly'] = isolation_forest.fit_predict(rainfall_data[['ANNUAL']])

#identify anomalies in annual rainfall
annual_anomalies = rainfall_data[rainfall_data['Annual_Anomaly'] == -1].reset_index()
print(annual_anomalies)
print("Years with anomalies in annual rainfall:")
print(annual_anomalies[['YEAR', 'ANNUAL']])

#detect anomalous months based on monthly data
monthly_data = ['JAN',   'FEB',   'MAR',   'APR',   'MAY',    'JUN',    'JUL',    'AUG',    'SEP',   'OCT',   'NOV',  'DEC']
monthly_anomalies = isolation_forest.fit_predict(rainfall_data[monthly_data])
#add anomaly detection results for months
rainfall_data['Monthly_Anomaly'] = monthly_anomalies
monthly_anomalies_df = rainfall_data[rainfall_data['Monthly_Anomaly'] == -1][['YEAR'] + monthly_columns]

print(monthly_anomalies_df)

#plotting the anomalies
fig_annual_anomalies = go.Figure()

fig_annual_anomalies.add_trace(go.Scatter(
    x=rainfall_data['YEAR'],
    y=rainfall_data['ANNUAL'],
    mode='lines',
    name='Annual Rainfall',
    line=dict(color='blue', width=2),
    opacity=0.8
    ))
fig_annual_anomalies.add_trace(go.Scatter(
    x=annual_anomalies['YEAR'],
    y=annual_anomalies['ANNUAL'],
    mode='markers',
    name='Anomalies',
    marker=dict(color='red', size=10, symbol='x')
))
fig_annual_anomalies.add_hline(
    y=rainfall_data['ANNUAL'].mean(),
    line_dash="dash",
    line_color="green",
    annotation_text="Mean Rainfall",
    annotation_position="top right"
    )
fig_annual_anomalies.update_layout(
    title='Annual Rainfall Anomalies in India (1901-2015)',
    xaxis_title='Year',
    yaxis_title='Rainfall (mm)',
    template='plotly_white',
    legend=dict(title="Legend"),
    height=500,
    width=800
)
fig_annual_anomalies.show()

#preparing for the monthly anomalies
monthly_anomalies = []
for column in monthly_columns:
    for _, row in monthly_anomalies_df.iterrows():
        monthly_anomalies.append({'Year': row['YEAR'], 'Month': column, 'Rainfall': row[column]})

        monthly_anomalies_df_long = pd.DataFrame(monthly_anomalies)
        #print(monthly_anomalies_df_long)
fig_monthly_anomalies = px.line(
    rainfall_data,
    x='YEAR',
    y=monthly_columns,
    labels={'YEAR': 'Year', 'value': 'Rainfall (mm)','variable': 'Month'},
    title='Monthly Rainfall Anomalies in India (1901-2015)',
    color_discrete_sequence=px.colors.qualitative.Pastel
)
fig_monthly_anomalies.add_traces(go.Scatter(
    x=monthly_anomalies_df_long['Year'],
    y=monthly_anomalies_df_long['Rainfall'],
    mode='markers',
    name='Anomalies Months',
    marker=dict(color='red', size=5, symbol='circle')
))
fig_monthly_anomalies.update_layout(
    template='plotly_white',
    legend=dict(title="Legend"),
    height=500,
    width=800
)
fig_monthly_anomalies.show()

"""# Correlating Seasonal Rainfall with Annual Totals

we will calculate the correlation coefficients between seasonal rainfall and annual rainfall totals to understand how much each season contributes to the overall yearly rainfall:
"""

#correlation analysis between monsoon (Jun-Sep) rainfall and other seasons
seasonal_column = ['Jan-Feb', 'Mar-May', 'Jun-Sep', 'Oct-Dec']
monsoon_column = 'Jun-Sep'
relationship ={}

for season in seasonal_column:
  if season != monsoon_column:
    corr, _ = pearsonr(rainfall_data[season], rainfall_data[monsoon_column])
    relationship[season] = corr

correlational_data = pd.DataFrame({
    'Season': list(relationship.keys()),
    'Correlation': list(relationship.values())
})
correlational_data.head()

#plotting
fig_correlation = px.bar(
    correlational_data,
    x='Season',
    y='Correlation',
    labels={'Season': 'Season', 'Correlation': 'Correlation Coefficient'},
    title='Correlation between Seasonal Rainfall and Monsoon Rainfall(Jun-Sep)',
    color='Correlation',
    color_continuous_scale='RdBu',
    text='Correlation'
)
fig_correlation.update_traces(marker_line_color='black',marker_line_width=1.5, opacity=0.6,texttemplate='%{text:.2f}')
fig_correlation.update_layout(
    template='plotly_white',
    height=500,
    width=800
)
fig_correlation.add_hline(
    y=0,
    line_dash="dash",
    line_color="red",
    annotation_text="No Correlation",
    annotation_position="left bottom",
    )
fig_correlation.show()

"""# Grouping Years Based on Rainfall Patterns

Now, by applying k-means clustering, we will group years into three categories: Dry, Normal, and Wet, based on rainfall patterns:
"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

#preprocessing data for clustering
rainfall_features = rainfall_data[['Jan-Feb','Mar-May','Jun-Sep','Oct-Dec','ANNUAL']]
scaler = StandardScaler()
scaled_features = scaler.fit_transform(rainfall_features)
print(scaled_features)

#perform k-means clustering
kmeans = KMeans(n_clusters=3, random_state=42)
rainfall_data['Rainfall_Cluster'] = kmeans.fit_predict(scaled_features)
print(rainfall_data[['YEAR', 'Rainfall_Cluster']])

#map cluster labels to catergories (eg. Dry, Normal and Wet)
cluster_labels = {
    0: 'Dry',
    1: 'Normal',
    2: 'Wet'
}
rainfall_data['Rainfall_Category'] = rainfall_data['Rainfall_Cluster'].map(cluster_labels)

#plotting
fig_cluster = px.scatter(
    rainfall_data,
    x='YEAR',
    y='ANNUAL',
    color='Rainfall_Category',
    color_discrete_sequence=px.colors.qualitative.Set2,
    hover_data= {'Rainfall_Cluster':True,'Rainfall_Category':True},
    labels={'YEAR': 'Year', 'ANNUAL': 'Annual Rainfall (mm)'},
    title='Rainfall Patterns in India (1901-2015)'
)
fig_cluster.update_layout(
    template='plotly_white',
    height=500,
    width=800
)

fig_cluster.show()

"""# Forecasting Future Rainfall

we will use the Prophet library to forecast annual rainfall for the next 20 years:
"""

rainfall_data['DATE'] = pd.to_datetime(rainfall_data['YEAR'], format='%Y')
annual_rainfall_ts = rainfall_data.set_index('DATE')['ANNUAL']
print(annual_rainfall_ts)

#forcasting using prophet algorithm
from prophet import Prophet
#prepare the data for prophet
prophet_data = annual_rainfall_ts.reset_index()
prophet_data.columns = ['ds', 'y']
# print(prophet_data)

from prophet.plot import plot_plotly, plot_components_plotly

prophet_model = Prophet()
prophet_model.fit(prophet_data)

#create a future dataframe for the next 20 years
future = prophet_model.make_future_dataframe(periods=20, freq='YE')
forecast = prophet_model.predict(future)
print("the predicted values from 2016-2035")
print(forecast[['ds', 'yhat']].tail(20))

fig_forcast = plot_plotly(prophet_model, forecast)
fig_forcast.update_layout(
    title='Annual Rainfall Forecast for the Next 20 Years',
    xaxis_title='Year',
    yaxis_title='Rainfall (mm)',
    template='plotly_white',
    height=500,
)

fig_forcast.show()